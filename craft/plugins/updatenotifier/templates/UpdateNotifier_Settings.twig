{#
/**
 * UpdateNotifier plugin for Craft CMS
 *
 * UpdateNotifier Settings.twig
 *
 * @author    Billy Fagan
 * @copyright Copyright (c) 2017 Billy Fagan
 * @link      https://billyfagan.co.uk
 * @package   UpdateNotifier
 * @since     1.0.0
 */
#}

{% import "_includes/forms" as forms %}

{% includeCssResource "updatenotifier/css/UpdateNotifier_Style.css" %}
{% includeJsResource "updatenotifier/js/UpdateNotifier_Script.js" %}

{{ forms.textField({
  label: 'Secret Key',
  instructions: 'This key will be required by your app to query the site.',
  id: 'secretKey',
  name: 'secretKey',
  required: true,
  value: settings['secretKey']}) }}

<input type="button" class="btn submit" id="secret-key-generator" value="Generate New Key">
<strong>Note: If you generate a new key, any existing apps will cease to work.</strong>
<script>
  {% set uuidJs %}
  var crypto = window.crypto || window.msCrypto || null; // IE11 fix
  var Guid = Guid || (function () {
      var EMPTY = '00000000-0000-0000-0000-000000000000';
      var _padLeft = function (paddingString, width, replacementChar) {
          return paddingString.length >= width ? paddingString : _padLeft(replacementChar + paddingString, width, replacementChar || ' ');
      };

      var _s4 = function (number) {
          var hexadecimalResult = number.toString(16);
          return _padLeft(hexadecimalResult, 4, '0');
      };

      var _cryptoGuid = function () {
          var buffer = new window.Uint16Array(8);
          window.crypto.getRandomValues(buffer);
          return [_s4(buffer[0]) + _s4(buffer[1]), _s4(buffer[2]), _s4(buffer[3]), _s4(buffer[4]), _s4(buffer[5]) + _s4(buffer[6]) + _s4(buffer[7])].join('-');
      };

      var _guid = function () {
          var currentDateMilliseconds = new Date().getTime();
          return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (currentChar) {
              var randomChar = (currentDateMilliseconds + Math.random() * 16) % 16 | 0;
              currentDateMilliseconds = Math.floor(currentDateMilliseconds / 16);
              return (currentChar === 'x' ? randomChar : (randomChar & 0x7 | 0x8)).toString(16);
          });
      };

      var create = function () {
          var hasCrypto = crypto != 'undefined' && crypto !== null,
              hasRandomValues = typeof(window.crypto.getRandomValues) != 'undefined';
          return (hasCrypto && hasRandomValues) ? _cryptoGuid() : _guid();
      };

      return {
          newGuid: create,
          empty: EMPTY
      };
  })();

  var generatorButton = document.getElementById('settings-secret-key-generator');
  generatorButton.addEventListener('click', function(){
      var keyInput = document.getElementById('settings-secretKey');
      keyInput.value = Guid.newGuid();
  });

  {% endset %}
</script>
{% includeJs uuidJs %}